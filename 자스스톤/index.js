/*
    개발 순서
    1. 상대 카드 내카드 내영웅 상대영웅 덱 코스트 화면 그리기
    2. 초기셋팅 함수를 만든다. => 기능 나눌때 편할려구 함수로 하는거지 딱히 이유는 없음
    3. 자주 쓰는 div 친구들을 변수로 선언
    4. 카드공장 함수 만들기 => 생성자패턴을 사용해서 , 공격력 체력 렌덤으로 생성
    5. 가상 데이터 저장해줄 배열 만들고  카드 공장에서 뽑은 애들을 각각 맞게 배치 후 초기 셋팅 끝

    6. 쫄병카드 코스트에 맞춰 뽑기
    7. 필드카드 선택과 턴오버 (필드 안 카드 선택하면 공격된다) 
*/
/*
    
    cloneNode와 생성자 활용
    cloneNode로 기존 태그를그대로 복사 가능,인자에 true를 넣으면 내부까지 복사 가능
    ex) var clone = document.querySelelctor('복사할 태그').cloneNode(true)
    

    return => return 은 값을 반환한다는 의미로 쓰이지만 exit의 의미로도 자주 쓰인다. https://skql.tistory.com/102
    function 함수(){
        if(){
            return // => 리턴만 잇다면 if문을 감싸구 있는 함수를 종료 시킨다.
        }

        if(){
            return true // =>if문을 감싸구 있는 함수를 종료시키면서 리턴값으로 true를 반환한다.
        }
    }
*/
function 상대덱생성(){
    // ㅅ카드를 생성해서 5개 넣기 위해 생성자 함수를 for문을 통해 돌린다.

}
function 상대덱생성(){

}
function 상대덱생성(){

}
function 상대덱생성(){

}
function 상대덱생성(){

}


//4. 카드공장을 실행할때마다 카드 생성자 함수가 안에 잇으면 계속 선언 되니깐카드공장 밖으로 선언 부분을 꺼낸다.
function Card (){

}
function 카드공장(){
    return new Card(); //=> 입력값을 매개변수로 딱히 받지 않는다면 리턴 값으로 바로 생성자함수를 줘도 된다
}